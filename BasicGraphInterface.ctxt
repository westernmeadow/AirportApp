#BlueJ class context
comment0.target=BasicGraphInterface
comment1.params=vertexLabel
comment1.target=boolean\ addVertex(java.lang.Object)
comment1.text=\ Adds\ a\ given\ vertex\ to\ this\ graph.\r\n\ @param\ vertexLabel\ An\ object\ that\ labels\ the\ new\ vertex\ and\ is\r\n\ \ \ \ \ \ distinct\ from\ the\ labels\ of\ current\ vertices.\r\n@return\ True\ if\ the\ vertex\ is\ added,\ or\ false\ if\ not.
comment2.params=begin\ end\ edgeWeight
comment2.target=boolean\ addEdge(java.lang.Object,\ java.lang.Object,\ double)
comment2.text=\ Adds\ a\ weighted\ edge\ between\ two\ given\ distinct\ vertices\ that\r\n\ are\ currently\ in\ this\ graph.\ The\ desired\ edge\ must\ not\ already\r\n\ be\ in\ the\ graph.\ In\ a\ directed\ graph,\ the\ edge\ points\ toward\r\n\ the\ second\ vertex\ given.\r\n\ @param\ begin\ An\ object\ that\ labels\ the\ origin\ vertex\ of\ the\ edge.\r\n\ @param\ end\ An\ object,\ distinct\ from\ begin,\ that\ labels\ the\ end\r\n\ \ \ \ \ \ vertex\ of\ the\ edge.\r\n\ @param\ edgeWeight\ The\ real\ value\ of\ the\ edge's\ weight.\r\n@return\ True\ if\ the\ edge\ is\ added,\ or\ false\ if\ not.
comment3.params=begin\ end
comment3.target=boolean\ addEdge(java.lang.Object,\ java.lang.Object)
comment3.text=\ Adds\ an\ unweighted\ edge\ between\ two\ given\ distinct\ vertices\r\n\ that\ are\ currently\ in\ this\ graph.\ The\ desired\ edge\ must\ not\r\n\ already\ be\ in\ the\ graph.\ In\ a\ directed\ graph,\ the\ edge\ points\r\n\ toward\ the\ second\ vertex\ given.\r\n\ @param\ begin\ An\ object\ that\ labels\ the\ origin\ vertex\ of\ the\ edge.\r\n\ @param\ end\ An\ object,\ distinct\ from\ begin,\ that\ labels\ the\ end\r\n\ \ \ \ \ \ vertex\ of\ the\ edge.\r\n@return\ True\ if\ the\ edge\ is\ added,\ or\ false\ if\ not.
comment4.params=begin\ end
comment4.target=boolean\ removeEdge(java.lang.Object,\ java.lang.Object)
comment4.text=\ Removes\ an\ unweighted\ edge\ between\ two\ given\ distinct\ vertices\r\n\ that\ are\ currently\ in\ this\ graph.\ In\ a\ directed\ graph,\ the\ edge\ points\r\n\ toward\ the\ second\ vertex\ given.\r\n\ @param\ begin\ An\ object\ that\ labels\ the\ origin\ vertex\ of\ the\ edge.\r\n\ @param\ end\ An\ object,\ distinct\ from\ begin,\ that\ labels\ the\ end\r\n\ \ \ \ \ \ vertex\ of\ the\ edge.\r\n@return\ True\ if\ the\ edge\ is\ removed,\ or\ false\ if\ not.
comment5.params=begin\ end
comment5.target=boolean\ hasEdge(java.lang.Object,\ java.lang.Object)
comment5.text=\ Sees\ whether\ an\ edge\ exists\ between\ two\ given\ vertices.\r\n\ @param\ begin\ An\ object\ that\ labels\ the\ origin\ vertex\ of\ the\ edge.\r\n\ @param\ end\ An\ object\ that\ labels\ the\ end\ vertex\ of\ the\ edge.\r\n@return\ True\ if\ an\ edge\ exists.
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\ Sees\ whether\ this\ graph\ is\ empty.\r\n@return\ True\ if\ the\ graph\ is\ empty.
comment7.params=
comment7.target=int\ getNumberOfVertices()
comment7.text=\ Gets\ the\ number\ of\ vertices\ in\ this\ graph.\r\n@return\ The\ number\ of\ vertices\ in\ the\ graph.
comment8.params=
comment8.target=int\ getNumberOfEdges()
comment8.text=\ Gets\ the\ number\ of\ edges\ in\ this\ graph.\r\n@return\ The\ number\ of\ edges\ in\ the\ graph.
comment9.params=
comment9.target=void\ clear()
comment9.text=\ Removes\ all\ vertices\ and\ edges\ from\ this\ graph\r\nresulting\ in\ an\ empty\ graph.
numComments=10
