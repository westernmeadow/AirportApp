#BlueJ class context
comment0.target=VertexInterface
comment1.params=
comment1.target=java.lang.Object\ getLabel()
comment1.text=\ Gets\ this\ vertex's\ label.\r\n@return\ The\ object\ that\ labels\ the\ vertex.
comment10.params=
comment10.target=boolean\ hasNeighbor()
comment10.text=\ Sees\ whether\ this\ vertex\ has\ at\ least\ one\ neighbor.\r\n@return\ True\ if\ the\ vertex\ has\ a\ neighbor.
comment11.params=
comment11.target=VertexInterface\ getUnvisitedNeighbor()
comment11.text=\ Gets\ an\ unvisited\ neighbor,\ if\ any,\ of\ this\ vertex.\r\n\ @return\ Either\ a\ vertex\ that\ is\ an\ unvisited\ neighbor\ or\ null\r\nif\ no\ such\ neighbor\ exists.
comment12.params=predecessor
comment12.target=void\ setPredecessor(VertexInterface)
comment12.text=\ Records\ the\ previous\ vertex\ on\ a\ path\ to\ this\ vertex.\r\n@param\ predecessor\ The\ vertex\ previous\ to\ this\ one\ along\ a\ path.
comment13.params=
comment13.target=VertexInterface\ getPredecessor()
comment13.text=\ Gets\ the\ recorded\ predecessor\ of\ this\ vertex.\r\n\ @return\ Either\ this\ vertex's\ predecessor\ or\ null\ if\ no\ predecessor\r\nwas\ recorded.
comment14.params=
comment14.target=boolean\ hasPredecessor()
comment14.text=\ Sees\ whether\ a\ predecessor\ was\ recorded\ for\ this\ vertex.\r\n@return\ True\ if\ a\ predecessor\ was\ recorded.
comment15.params=newCost
comment15.target=void\ setCost(double)
comment15.text=\ Records\ the\ cost\ of\ a\ path\ to\ this\ vertex.\r\n@param\ newCost\ The\ cost\ of\ the\ path.
comment16.params=
comment16.target=double\ getCost()
comment16.text=\ Gets\ the\ recorded\ cost\ of\ the\ path\ to\ this\ vertex.\r\n@return\ The\ cost\ of\ the\ path.
comment2.params=
comment2.target=void\ visit()
comment2.text=Marks\ this\ vertex\ as\ visited.
comment3.params=
comment3.target=void\ unvisit()
comment3.text=Removes\ this\ vertex's\ visited\ mark.
comment4.params=
comment4.target=boolean\ isVisited()
comment4.text=\ Sees\ whether\ the\ vertex\ is\ marked\ as\ visited.\r\n@return\ True\ if\ the\ vertex\ is\ visited.
comment5.params=endVertex\ edgeWeight
comment5.target=boolean\ connect(VertexInterface,\ double)
comment5.text=\ Connects\ this\ vertex\ and\ a\ given\ vertex\ with\ a\ weighted\ edge.\r\n\ The\ two\ vertices\ cannot\ be\ the\ same,\ and\ must\ not\ already\r\n\ have\ this\ edge\ between\ them.\ In\ a\ directed\ graph,\ the\ edge\r\n\ points\ toward\ the\ given\ vertex.\r\n\ @param\ endVertex\ A\ vertex\ in\ the\ graph\ that\ ends\ the\ edge.\r\n\ @param\ edgeWeight\ A\ real-valued\ edge\ weight,\ if\ any.\r\n@return\ True\ if\ the\ edge\ is\ added,\ or\ false\ if\ not.
comment6.params=endVertex
comment6.target=boolean\ connect(VertexInterface)
comment6.text=\ Connects\ this\ vertex\ and\ a\ given\ vertex\ with\ an\ unweighted\r\n\ edge.\ The\ two\ vertices\ cannot\ be\ the\ same,\ and\ must\ not\r\n\ already\ have\ this\ edge\ between\ them.\ In\ a\ directed\ graph,\r\n\ the\ edge\ points\ toward\ the\ given\ vertex.\r\n\ @param\ endVertex\ A\ vertex\ in\ the\ graph\ that\ ends\ the\ edge.\r\n@return\ True\ if\ the\ edge\ is\ added,\ or\ false\ if\ not.
comment7.params=endVertex
comment7.target=boolean\ disconnect(VertexInterface)
comment7.text=\ Disconnects\ this\ vertex\ and\ a\ given\ vertex\ with\ an\ unweighted\r\n\ edge.\ The\ two\ vertices\ cannot\ be\ the\ same.\ In\ a\ directed\ graph,\r\n\ the\ edge\ points\ toward\ the\ given\ vertex.\r\n\ @param\ endVertex\ A\ vertex\ in\ the\ graph\ that\ ends\ the\ edge.\r\n@return\ True\ if\ the\ edge\ is\ removed,\ or\ false\ if\ not.
comment8.params=
comment8.target=java.util.Iterator\ getNeighborIterator()
comment8.text=\ Creates\ an\ iterator\ of\ this\ vertex's\ neighbors\ by\ following\r\n\ all\ edges\ that\ begin\ at\ this\ vertex.\r\n@return\ An\ iterator\ of\ the\ neighboring\ vertices\ of\ this\ vertex.
comment9.params=
comment9.target=java.util.Iterator\ getWeightIterator()
comment9.text=\ Creates\ an\ iterator\ of\ the\ weights\ of\ the\ edges\ to\ this\r\n\ vertex's\ neighbors.\r\n@return\ An\ iterator\ of\ edge\ weights\ for\ edges\ to\ neighbors\ of\ this\ vertex.
numComments=17
